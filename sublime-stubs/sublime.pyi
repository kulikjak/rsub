import enum
from typing import Any, Callable, Dict, List, Literal, Optional, Union
from typing_extensions import TypeAlias

CommandArgs: TypeAlias = 'Optional[Dict[str, Value]]'
Value: TypeAlias = 'Union[bool, str, int, float, List[Any], Dict[str, Any]]'

class NewFileFlags(enum.IntFlag): ...

def active_window() -> Window: ...
def error_message(msg: str) -> None: ...
def platform() -> Literal['osx', 'linux', 'windows']: ...
def run_command(cmd: str, args: CommandArgs = ...) -> None: ...
def set_timeout(callback: Callable[[None], None], delay: int = ...) -> None: ...
def version() -> str: ...
def windows() -> list[Window]: ...

class Window:
    def open_file(self, fname: str, flags: NewFileFlags=..., group: int = ...) -> View: ...

class View:
    def id(self) -> int: ...
    def settings(self) -> Settings: ...

class Settings:
    def set(self, key: str, value: Value) -> None: ...
